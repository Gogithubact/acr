name: ACR XPD to XPQ

on:
  workflow_dispatch:
    inputs:
      trigger:
        description: 'Trigger the workflow manually'
        required: true
        default: 'manual'
  
  push:
    branches:
      - main

jobs:
  ACR-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Install yq
        run: |
          sudo apt-get update && sudo apt-get install python3-pip -y && sudo apt-get install jq
          pip3 install yq          
      - name: Extract tag and repository values from devgo/version.yaml
        id: extract_admin_values
        run: |
          echo "::set-output name=backend_repository::$(yq '.app1.image.repository' < devgo/version.yaml)"
          echo "::set-output name=backend_tag::$(yq '.app1.image.tag' < devgo/version.yaml)"
      - name: Extract repository values from prodgo/version.yaml
        id: prodgo_repo
        run: |
          echo "::set-output name=backend_prodgo_repository::$(yq '.app1.image.repository' < prodgo/version.yaml)"
      - name: Login to ACR (Development) #added secrets
        uses: docker/login-action@v3
        with:
          registry: devgoo.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID }}
          password: ${{ secrets.AZURE_CLIENT_SECRET }}
      - name: Login to ACR (Production)
        uses: docker/login-action@v3
        with:
          registry: prodgo.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          password: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
      - name: Pull and Push backend image to acr_xpq
        run: |
          docker pull ${{ steps.extract_admin_values.outputs.backend_repository}}:${{ steps.extract_admin_values.outputs.backend_tag }}
          docker tag ${{ steps.extract_admin_values.outputs.backend_repository }}:${{ steps.extract_admin_values.outputs.backend_tag }} ${{ steps.prodgo_repo.outputs.backend_prodgo_repository }}:${{ steps.extract_admin_values.outputs.backend_tag }}
          # docker push ${{ steps.prodgo_repo.outputs.backend_prodgo_repository }}:${{ steps.extract_admin_values.outputs.backend_tag }}
      - name: Save Docker image
        run: docker save --output image.tar "${{ steps.prodgo_repo.outputs.backend_prodgo_repository }}:${{ steps.extract_admin_values.outputs.backend_tag }}"
      - name: Upload Docker image
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  Prod-pull:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Install yq
        run: |
          sudo apt-get update && sudo apt-get install python3-pip -y && sudo apt-get install jq
          pip3 install yq   
      - name: Extract tag and repository values from devgo/version.yaml
        id: extract_admin_values
        run: |
          echo "::set-output name=backend_repository::$(yq '.app1.image.repository' < devgo/version.yaml)"
          echo "::set-output name=backend_tag::$(yq '.app1.image.tag' < devgo/version.yaml)"
      - name: Extract repository values from prodgo/version.yaml
        id: prodgo_repo
        run: |
          echo "::set-output name=backend_prodgo_repository::$(yq '.app1.image.repository' < prodgo/version.yaml)" 
      - name: Login to ACR (Production)
        uses: docker/login-action@v3
        with:
          registry: prodgo.azurecr.io
          username: ${{ secrets.AZURE_CLIENT_ID_PRD }}
          password: ${{ secrets.AZURE_CLIENT_SECRET_PRD }}
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image
          path: image.tar
          retention-days: 1
      - name: Push backend image to acr_xpq
        run: |
          docker images 
          # docker push ${{ steps.prodgo_repo.outputs.backend_prodgo_repository }}:${{ steps.extract_admin_values.outputs.backend_tag }}
